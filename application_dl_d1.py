# -*- coding: utf-8 -*-
"""Application_DL_D1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JFv4Mi3JB4m31tUzxn0Clam6hsm3PvP5
"""

import cv2
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
Img=cv2.imread("MainImg.png")
print(type(Img))
#print(Img)
cv2_imshow(Img)

# Layers Seperation
print(Img.shape)
Red=Img[:,:,0]
Grn=Img[:,:,1]
Blu=Img[:,:,2]
plt.subplot(221)
plt.imshow(Img)
plt.subplot(222)
plt.imshow(Red,cmap="gray")
plt.subplot(223)
plt.imshow(Grn,cmap="gray")
plt.subplot(224)
plt.imshow(Blu,cmap="gray")
plt.show()

Red=Img[:,:,0]
Grn=Img[:,:,1]
Blu=Img[:,:,2]

Nwimg=Img.copy()
Nwimg[:,:,0]=Grn
Nwimg[:,:,1]=Blu
Nwimg[:,:,2]=Grn
plt.imshow(Img)
plt.show()
plt.imshow(Nwimg)
plt.show()

Sz=Img.shape
print(Sz)
Nwimg[0:181,:,:]=Img[181:,:,:]
Nwimg[181:,:,:]=Img[0:181,:,:]

cv2_imshow(Img)
#cv2_imshow(Nwimg)

Sz=Img.shape
print(Sz)
# Parts Seperation
A=Img[0:181,0:221,:]
B=Img[181:,0:221,:]
C=Img[0:181,221:,:]
D=Img[181:,221:,:]

# Parts Assignment
Nwimg[0:181,0:221,:]=D
Nwimg[181:,0:221,:]=C
Nwimg[0:181,221:,:]=B
Nwimg[181:,221:,:]=A
cv2_imshow(Nwimg)

# Access the data from tenserflow
import tensorflow.keras as tf
import numpy as np

Mydata=tf.datasets.mnist
(Xtrain,Ytrain),(Xtest,Ytest)=Mydata.load_data()
print(Xtrain.shape)
print(Ytrain.shape)
print(Xtest.shape)
print(Ytest.shape)

print(Ytrain[45])
plt.imshow(Xtrain[45,:,:],cmap="gray")

# Creation of Deep Learning Network
Model=tf.models.Sequential() # Model Type
Model.add(tf.layers.Flatten()) # Input Layer
Model.add(tf.layers.Dense(784,activation="relu")) # Hidden Layer (Number of neurons suggetive max to input size)
Model.add(tf.layers.Dense(10,activation="softmax")) #Output layer (Softmax: to get results in probability)
# neurons are set to 10 in final layer as the data is having 10 classes

Model.compile(loss="sparse_categorical_crossentropy",optimizer="adam",
              metrics=["accuracy"])

# Accuracy, Precision, Recall, Fscore, Sensitivity, SPecificity
# True positive: TP, False Positive: FP, True Negative: TN, False Negative: FN
#A----   A---A   TP
#B----- B----B   FP
#A----- A----B   TN
#B-----  B----A  FN

# data Normalization
xtrain=Xtrain/255
xtest=Xtest/255

Model.fit(xtrain,Ytrain,epochs=15)

ypred=Model.predict(xtest)
print(ypred)

print(ypred[786])
print(ypred[786].max())
print(np.argmax(ypred[786]))

print(Ytest[786])
plt.imshow(Xtest[786,:,:])

Myim=cv2.imread("MainImg.png",0)
plt.imshow(Myim,cmap="gray")
plt.show()

Myim=cv2.bitwise_not(Myim)
plt.imshow(Myim,cmap="gray")
plt.show()

Myim=cv2.resize(Myim,(28,28))
plt.imshow(Myim,cmap="gray")
plt.show()

print(Myim.shape)

Myout=Model.predict(np.array([[Myim]]))
print(Myout)
print(np.argmax(Myout))